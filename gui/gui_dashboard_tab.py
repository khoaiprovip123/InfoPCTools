from PyQt5.QtWidgets import (
    QWidget, QVBoxLayout, QHBoxLayout, QScrollArea, QGridLayout, QLabel, QProgressBar, QPushButton, QFrame, QSpacerItem, QSizePolicy
)
from PyQt5.QtCore import Qt
# B·∫°n c√≥ th·ªÉ c·∫ßn import th√™m c√°c h·∫±ng s·ªë ho·∫∑c h√†m helper n·∫øu ch√∫ng ƒë∆∞·ª£c s·ª≠ d·ª•ng tr·ª±c ti·∫øp
# trong vi·ªác t·∫°o UI c·ªßa tab n√†y v√† kh√¥ng ƒë∆∞·ª£c truy·ªÅn t·ª´ PcInfoAppQt.
# V√≠ d·ª•: from .gui_qt import DEFAULT_FONT_FAMILY, H1_FONT_SIZE, BODY_FONT_SIZE (n·∫øu c·∫ßn)
from PyQt5.QtGui import QFont, QColor, QIcon

class PerformanceCard(QFrame):
    def __init__(self, icon_char, title, object_name_prefix=""):
        super().__init__()
        self.setObjectName(f"{object_name_prefix}Card")
        self.setProperty("cardType", object_name_prefix)
        
        layout = QVBoxLayout()
        layout.setContentsMargins(20, 20, 20, 20)
        layout.setSpacing(0)
        
        # Header v·ªõi icon v√† title
        header_layout = QHBoxLayout()
        header_layout.setSpacing(15)
        header_layout.setContentsMargins(0, 0, 0, 0)
        
        icon_label = QLabel(icon_char)
        icon_label.setObjectName(f"{object_name_prefix}Icon")
        
        title_label = QLabel(title)
        title_label.setObjectName(f"{object_name_prefix}Title")
        
        header_layout.addWidget(icon_label)
        header_layout.addWidget(title_label)
        header_layout.addStretch()
        
        layout.addLayout(header_layout)
        
        # Spacer
        layout.addSpacerItem(QSpacerItem(20, 15, QSizePolicy.Minimum, QSizePolicy.Fixed))

        # Gi√° tr·ªã ch√≠nh
        self.value_label = QLabel("0%")
        self.value_label.setObjectName(f"{object_name_prefix}Value")
        self.value_label.setWordWrap(True)
        layout.addWidget(self.value_label)
        
        # Thanh ti·∫øn tr√¨nh
        self.progress_bar = QProgressBar()
        self.progress_bar.setRange(0, 100)
        self.progress_bar.setValue(0)
        self.progress_bar.setTextVisible(False)
        self.progress_bar.setObjectName(f"{object_name_prefix}Progress")
        layout.addWidget(self.progress_bar)
        
        # Chi ti·∫øt
        self.details_label = QLabel("ƒêang t·∫£i...")
        self.details_label.setObjectName(f"{object_name_prefix}Details")
        self.details_label.setWordWrap(True)
        layout.addWidget(self.details_label)

        layout.addStretch()
        self.setLayout(layout)
    
    def update_value(self, new_value_text):
        self.value_label.setText(new_value_text)

    def update_details(self, new_details_text):
        self.details_label.setText(new_details_text)

    def update_progress(self, new_progress_value):
        self.progress_bar.setValue(new_progress_value)

class QuickActionButton(QPushButton):
    def __init__(self, text, icon_text, color):
        super().__init__()
        self.setText(f"{icon_text} {text}")
        self.setObjectName("ActionBtn") # For QSS styling
        self.setProperty("btnColor", color) # Custom property for QSS
        self.setFont(QFont("Segoe UI", 10)) # Set font here, QSS will override some properties
        self.setFixedHeight(40) # Set fixed height
    
    def darken_color(self, color, factor=0.2):
        # Simple color darkening logic (can be expanded for more precise control)
        # For now, use a simple mapping or direct manipulation if colors are known
        qcolor = QColor(color)
        darker_qcolor = qcolor.darker(100 + int(factor * 100)) # 100 means no change, 200 means twice as dark
        return darker_qcolor.name()
    # Override setStyleSheet to apply dynamic color
    def setStyleSheet(self, styleSheet):
        # This method is called by Qt when setting QSS.
        # We need to ensure our dynamic color is applied.
        # The actual styling is now handled in gui_qt.py's _apply_styles
        # using the 'btnColor' property.
        super().setStyleSheet(styleSheet)

def create_dashboard_tab_content(parent_app):
    """
    T·∫°o n·ªôi dung cho tab Dashboard.
    'parent_app' l√† instance c·ªßa PcInfoAppQt ƒë·ªÉ truy c·∫≠p c√°c thu·ªôc t√≠nh/ph∆∞∆°ng th·ª©c c·∫ßn thi·∫øt
    (v√≠ d·ª•: fonts, h·∫±ng s·ªë m√†u, ho·∫∑c c√°c ph∆∞∆°ng th·ª©c ƒë·ªÉ k·∫øt n·ªëi signals).
    """
    # parent_app.page_dashboard l√† QWidget c·ªßa tab, layout s·∫Ω ƒë∆∞·ª£c ƒë·∫∑t cho n√≥
    layout = QVBoxLayout(parent_app.page_dashboard) 
    layout.setContentsMargins(15, 15, 15, 15)
    layout.setSpacing(20)

    # S·ª≠ d·ª•ng QScrollArea ƒë·ªÉ n·ªôi dung c√≥ th·ªÉ cu·ªôn khi c·ª≠a s·ªï nh·ªè l·∫°i
    dashboard_scroll_area = QScrollArea() 
    dashboard_scroll_area.setWidgetResizable(True)
    dashboard_scroll_area.setObjectName("DashboardScrollArea")
    dashboard_scroll_area.setStyleSheet("QScrollArea { border: none; }")
    
    dashboard_content_widget = QWidget() # Widget ch·ª©a to√†n b·ªô n·ªôi dung c·ªßa scroll area
    dashboard_content_layout = QVBoxLayout(dashboard_content_widget)
    dashboard_content_layout.setSpacing(20)

    # --- Ph·∫ßn 1: C√°c th·∫ª th√¥ng tin (PerformanceCard) ---
    info_cards_grid_layout = QGridLayout()
    info_cards_grid_layout.setSpacing(20)
    
    # L∆∞u c√°c card v√†o parent_app ƒë·ªÉ d·ªÖ d√†ng c·∫≠p nh·∫≠t
    parent_app.cpu_card = PerformanceCard("üñ•Ô∏è", "S·ª≠ d·ª•ng CPU", "cpu")
    parent_app.ram_card = PerformanceCard("üß†", "S·ª≠ d·ª•ng RAM", "ram")
    parent_app.ssd_card = PerformanceCard("üíæ", "S·ª≠ d·ª•ng SSD", "ssd")
    parent_app.gpu_card = PerformanceCard("üéÆ", "S·ª≠ d·ª•ng GPU", "gpu")

    info_cards_grid_layout.addWidget(parent_app.cpu_card, 0, 0)
    info_cards_grid_layout.addWidget(parent_app.ram_card, 0, 1)
    info_cards_grid_layout.addWidget(parent_app.ssd_card, 1, 0)
    info_cards_grid_layout.addWidget(parent_app.gpu_card, 1, 1)
    dashboard_content_layout.addLayout(info_cards_grid_layout)

    # Ph·∫ßn "T·ªëi ∆∞u nhanh"
    quick_actions_widget = QWidget()
    quick_actions_widget.setObjectName("QuickActionsWidget")
    quick_actions_layout = QVBoxLayout(quick_actions_widget)
    
    quick_actions_title = QLabel("‚ö° T·ªëi ∆Øu Nhanh")
    quick_actions_title.setObjectName("QuickActionsTitle")
    quick_actions_layout.addWidget(quick_actions_title)

    parent_app.action_buttons_grid_layout = QGridLayout()
    parent_app.action_buttons_grid_layout.setSpacing(15)

    actions = [
        ("D·ªçn D·∫πp H·ªá Th·ªëng", "üóëÔ∏è", "#ff6b35", parent_app.on_dashboard_cleanup_system_clicked),
        ("TƒÉng T·ªëc PC", "üöÄ", "#e74c3c", parent_app.on_dashboard_boost_pc_clicked),
        ("Qu√©t B·∫£o M·∫≠t", "üõ°Ô∏è", "#3498db", parent_app.on_dashboard_security_scan_clicked),
        ("C·∫≠p Nh·∫≠t Driver", "üíø", "#1abc9c", parent_app.on_dashboard_update_drivers_clicked)
    ]

    for i, (text, icon, color, handler) in enumerate(actions):
        btn = QuickActionButton(text, icon, color) # QuickActionButton now handles its own QSS based on 'btnColor' property
        btn.clicked.connect(handler)
        setattr(parent_app, f"btn_dashboard_quick_action_{i}", btn) # Store button as an attribute
        parent_app.action_buttons_grid_layout.addWidget(btn, 0, i)
        parent_app.action_buttons_grid_layout.setColumnStretch(i, 1)

    quick_actions_layout.addLayout(parent_app.action_buttons_grid_layout)
    dashboard_content_layout.addWidget(quick_actions_widget) # Th√™m ph·∫ßn T·ªëi ∆∞u nhanh v√†o layout ch√≠nh
    dashboard_content_layout.addStretch(1)
    dashboard_content_layout.addSpacerItem(QSpacerItem(20, 20, QSizePolicy.Minimum, QSizePolicy.Expanding)) # Push content to top

    dashboard_scroll_area.setWidget(dashboard_content_widget)
    layout.addWidget(dashboard_scroll_area)